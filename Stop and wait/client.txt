#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>  
#define PORT     8080
#define MAXLINE 1024
  
// Driver code
int main() {
    int sockfd;
    char buffer[MAXLINE];
    char frame[100]="FRAME  " ;
    char check[100] = "ACK FOR FRAME   ";
    struct sockaddr_in     servaddr;
  
    // Creating socket file descriptor
    sockfd = socket(PF_INET, SOCK_DGRAM, 0);
    if ( sockfd < 0 ) 
    {
        printf("socket creation failed");
        exit(EXIT_FAILURE);
    }
  
    bzero(&servaddr,sizeof(servaddr));
      
    // Filling server information
    servaddr.sin_family = PF_INET;
    servaddr.sin_port = htons(PORT);
    servaddr.sin_addr.s_addr = INADDR_ANY;
      
    int n, len;
    int c = 0;
    int nf;
    printf("Enter the no. of frames to be sent");
    scanf("%d",&nf);
    while(c < nf)
    {
    	    strcpy(frame,"FRAME  ");
            int seqnum=c%8;
	    frame[6]=(char)(seqnum+48);
	    //printf("%s hello\n",frame);
	    sendto(sockfd, (char *)frame, strlen(frame),0, (struct sockaddr *) &servaddr,sizeof(servaddr));
	 //   printf("frame %d sent.\n",seqnum);
           printf("%s SENT\n",frame);
            bzero(buffer,1024);
	    n = recvfrom(sockfd, (char *)buffer, MAXLINE,0, (struct sockaddr *) &servaddr,&len);
	    printf("%s RECIEVED\n",buffer);
	    buffer[n] = '\0';
            int flag =0;
	    for(int i=0;i<2;i++)
	    {
		if(buffer[i]!=check[i])
		{
		      //  printf("%c %c\n",buffer[i],check[i]);
			flag=1;
		}
	    }
	    if(flag==0 && buffer[n-1]==(char)(seqnum+48))
	    {
	       // printf("Success %d\n",c);
	    	c++;
	    	//printf("Success %d\n",c);
            }
    }
    strcpy(frame,"exit");
    sendto(sockfd, (char *)frame, strlen(frame),0, (struct sockaddr *) &servaddr,sizeof(servaddr));
    close(sockfd);
    printf("Client Exit... \n");
    return 0;
}